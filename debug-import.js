/**
 * Debug-funktion f√∂r att diagnostisera import-problem
 */
async function debugImportIssues() {
    console.log('üîç Startar debug-analys...');
    
    try {
        // 1. Ladda konfiguration
        await window.SHLImporter.loadConfig();
        console.log('‚úÖ Konfiguration laddad');
        
        // 2. H√§mta lag fr√•n Airtable
        console.log('üèí H√§mtar lag fr√•n Airtable...');
        const teams = await window.SHLImporter.fetchTeams();
        console.log('üìä Teams fr√•n Airtable:', Object.keys(teams));
        
        // 3. Ladda n√•gra matcher fr√•n CSV
        console.log('üìã L√§ser matchdata fr√•n CSV...');
        const matches = await window.SHLImporter.loadMatchesFromCSV();
        const firstMatch = matches[0];
        console.log('üìã F√∂rsta matchen fr√•n CSV:', firstMatch);
        
        // 4. Testa lagnamn-mappning
        const teamNameMapping = {
            'F√§rjestad BK': 'F√§rjestad BK',
            'Fr√∂lunda HC': 'Fr√∂lunda HC', 
            'V√§xj√∂ Lakers': 'V√§xj√∂ Lakers',
            'Lule√• Hockey': 'Lule√• HF',
            'Djurg√•rdens IF': 'Djurg√•rden IF',
            'Skellefte√• AIK': 'Skellefte√• AIK',
            'HV71': 'HV71',
            'R√∂gle BK': 'R√∂gle BK',
            'Leksands IF': 'Leksands IF',
            'Link√∂ping HC': 'Link√∂ping HC',
            'Malm√∂ Redhawks': 'Malm√∂ Redhawks',
            'Bryn√§s IF': 'Bryn√§s IF',
            'Timr√• IK': 'Timr√•',
            '√ñrebro Hockey': '√ñrebro HK'
        };
        
        // Testa mappningen f√∂r f√∂rsta matchen
        const homeTeamCSV = firstMatch.home_team;
        const awayTeamCSV = firstMatch.away_team;
        const homeTeamMapped = teamNameMapping[homeTeamCSV] || homeTeamCSV;
        const awayTeamMapped = teamNameMapping[awayTeamCSV] || awayTeamCSV;
        
        console.log('üèí Mappning test:');
        console.log(`  ${homeTeamCSV} ‚Üí ${homeTeamMapped} (finns: ${!!teams[homeTeamMapped]})`);
        console.log(`  ${awayTeamCSV} ‚Üí ${awayTeamMapped} (finns: ${!!teams[awayTeamMapped]})`);
        
        // 5. Kontrollera alla unika lagnamn i CSV
        const csvTeams = new Set();
        matches.forEach(match => {
            csvTeams.add(match.home_team);
            csvTeams.add(match.away_team);
        });
        
        console.log('üìã Alla lag i CSV:', Array.from(csvTeams).sort());
        
        // 6. Kontrollera vilka som saknas
        const missingTeams = [];
        csvTeams.forEach(csvTeam => {
            const mappedTeam = teamNameMapping[csvTeam] || csvTeam;
            if (!teams[mappedTeam]) {
                missingTeams.push({
                    csv: csvTeam,
                    mapped: mappedTeam,
                    available: Object.keys(teams)
                });
            }
        });
        
        if (missingTeams.length > 0) {
            console.error('‚ùå Saknade lag:', missingTeams);
        } else {
            console.log('‚úÖ Alla lag kan mappas korrekt!');
        }
        
        return {
            teamsFromAirtable: teams,
            teamsFromCSV: Array.from(csvTeams),
            missingTeams: missingTeams,
            firstMatch: firstMatch
        };
        
    } catch (error) {
        console.error('‚ùå Debug-fel:', error);
        throw error;
    }
}

// G√∂r funktionen tillg√§nglig globalt
window.debugImportIssues = debugImportIssues;